!!! 5
%html(lang="en")
  %head
    %meta(charset="utf-8")
    %meta(http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1")
    %meta(name="viewport" content="width=device-width, initial-scale=1.0")
    %link{rel: "shortcut icon", href: '/favicon.ico'}
    %title
      = content_for?(:title) ? yield(:title) : ''
      \- Depstack
    = csrf_meta_tags
    /[if lt IE 9]
      = javascript_include_tag "http://html5shim.googlecode.com/svn/trunk/html5.js"
    = stylesheet_link_tag "lumen", :media => "all"
    %meta{name: "twitter:card", content: "summary_large_image"}
    %meta{name: "twitter:site", content: "@depstack"}
    %meta{name: "twitter:title", content: "Find & vote for popular libraries"}
    %meta{name: "twitter:image:src", content: asset_url('logo.png')}
    %meta{name: "twitter:domain", content: request.host}

    %meta{property: "st:title", content: "Find & vote for popular libraries" }
    %meta{property: "og:url", content: request.url }
    %meta{property: "og:site_name", content: 'Depstack.io' }
    %meta{property: "og:title", content: "Find & vote for popular libraries" }
    %meta{property: "og:image", content: asset_url('logo.png') }
    %meta{property: "og:image:width", content: '978' }
    %meta{property: "og:image:height", content: '800' }

  %body
    - if flash[:error]
      .alert.alert-warning.alert-dismissable.alert-top
        %button{type: "button", class: "close", "data-dismiss" => "alert", "aria-hidden" => true} &times;
        %i.fa.fa-exclamation-triangle
        %strong Warning:
        = flash[:error]

    .container
      #header{class: ('mini' if !current_page?(root_path))}
        #login-form.bg-success
          - if logged_in?
            Hey
            = link_to current_user.name, votes_path
            = "(#{link_to 'Sign out', signout_path})".html_safe
          - else
            = link_to '/auth/github' do
              %i.fa.fa-github
              Sign in with Github

        - if current_page?(root_path)
          .jumbotron
            %h1
              %i.fa.fa-bars
              Depstack
            %p Find & vote for popular libraries
            #social.hidden-xs.text-center
              %iframe{id: "gh-fork", src: "http://ghbtns.com/github-btn.html?user=algolia&repo=depstack&type=fork", allowtransparency: "true", frameborder: "0", scrolling: "0", width: "53px", height: "20px"}
              %iframe{id: "gh-start", src: "http://ghbtns.com/github-btn.html?user=algolia&repo=depstack&type=watch&count=true", allowtransparency: "true", frameborder: "0", scrolling: "0", width: "110px", height: "20px"}
              %a.twitter-follow-button{href: "https://twitter.com/depstack", "data-show-count" => "false", "data-show-screen-name" => "true"}Follow @algolia
              %a.twitter-share-button{href: "https://twitter.com/share", "data-url" => root_url, "data-via" => "depstack", 'data-text' => 'Find & vote for popular libraries, realtime search powered by @algolia'} Tweet

        #search-form.form-horizontal
          %h1.logo
            = link_to root_path do
              %i.fa.fa-bars
              Depstack
          .form-group.has-feedback
            %input.form-control#q{type:'text', autocorrect: 'off', autocomplete: 'off', autocapitalize: 'off', spellcheck: 'false', placeholder: 'Find libraries by name or description'}
            %span.glyphicon.glyphicon-search.form-control-feedback
          .powered-by
            realtime search by
            = link_to 'http://www.algolia.com/?utm_source=depstack&utm_medium=link&utm_term=searchbar&utm_campaign=depstack', title: 'Hosted Realtime Search' do
              %img{src: '//www.algolia.com/assets/algolia128x40.png', alt: 'Hosted Realtime Search'}
          .btn-group
            %button{type: 'button', class: 'btn btn-default dropdown-toggle', 'data-toggle' => 'dropdown'}
              %span#hits-type All managers
              %span.caret
            %ul.dropdown-menu{role: 'menu'}
              %li= link_to 'All managers', '#', onclick: 'return toggleManager(this);', rel: 'all'
              %li= link_to 'Rubygems', '#', onclick: 'return toggleManager(this, "rubygems");', rel: 'rubygems'
              %li= link_to 'Go', '#', onclick: 'return toggleManager(this, "go");', rel: 'go'
              %li= link_to 'NPM', '#', onclick: 'return toggleManager(this, "npm");', rel: 'npm'
              %li= link_to 'PyPi', '#', onclick: 'return toggleManager(this, "pip");', rel: 'pip'
              %li= link_to 'Composer', '#', onclick: 'return toggleManager(this, "composer");', rel: 'composer'
              %li= link_to 'Julia', '#', onclick: 'return toggleManager(this, "julia");', rel: 'julia'
              %li= link_to 'Atom', '#', onclick: 'return toggleManager(this, "apm");', rel: 'apm'

      .row
        .col-lg-2.col-sm-3.hidden-xs
          #facets
        .col-lg-8.col-sm-9
          #stats
          #hits
          #pagination
          #noresults{style: 'display: none'}
            %h3.text-center No results for query <code id="no_results_q"></code> and <code id="no_results_filters"></code>
            .spacer50
            %h4.text-center.text-muted Something missing? Feature or pull-request? We're on <a href="http://github.com/algolia/depstack"><i class="fa fa-github"></i> Github</a>!

      #content
        = yield

    %footer
      .container
        .pull-left
          %ul.list-inline
            %li
              = link_to "http://github.com/algolia/depstack", class: 'text-muted' do
                %i.fa.fa-github
                Feature or pull-request?
            %li.text-muted.hidden-xs
              Theme by
              = link_to "Bootswatch", "http://bootswatch.com/"
            %li.text-muted.hidden-xs
              Icons from
              = link_to "Font Awesome", "http://fontawesome.io/"
        .pull-right
          %i.fa.fa-code
          with
          %i.fa.fa-heart
          by
          = link_to 'http://www.algolia.com/?utm_source=depstack&utm_medium=link&utm_term=footer&utm_campaign=depstack', title: 'Hosted Realtime Search' do
            %img{src: '//www.algolia.com/assets/algolia128x40.png', alt: 'Hosted Realtime Search'}

    .modal.fade#modal-log-in
      .modal-dialog
        .modal-content
          .modal-body
            %p.h3.text-center You need to log in for that.
          .modal-footer
            %button{type: "button", class: "btn btn-default", "data-dismiss" => "modal"} Close
            = link_to '/auth/github', class: 'btn btn-success btn-large' do
              %i.fa.fa-github
              Sign in with Github

    %script#library-hit{type: 'text/template'}
      :plain
        <div class="hit">
          <div class="title">
            {{#voted}}
            <i class="fa fa-star text-warning"></i>
            {{/voted}}
            {{^voted}}
            <a href="javascript:void(0)" onclick="vote(this, {{ objectID }})"><i class="fa fa-chevron-circle-up text-success"></i></a>
            {{/voted}}
            {{ score }}
            <a href="/libraries/{{ manager }}/{{ name }}">{{{ _highlightResult.short_name.value }}}</a>
            <span class="label label-info">{{ manager }}</span>
          </div>
          <div class="link">
            {{#homepage_uri}}
            <a href="{{ homepage_uri }}">{{{ _highlightResult.homepage_uri.value }}}</a>
            {{/homepage_uri}}
            {{^homepage_uri}}
              {{#repository_uri}}
              <a href="{{ repository_uri }}">{{{ _highlightResult.repository_uri.value }}}</a>
              {{/repository_uri}}
            {{/homepage_uri}}
          </div>
          <div class="info">{{{ _snippetResult.description.value }}}</div>
          {{#category}}
          <div class="categories">
            Category: <span>{{ category }}</span>
          </div>
          {{/category}}
          {{#used_by_count}}
          <div class="dependencies">
            <ul class="list-inline">
              <li>Used by:</li>
              {{#used_by}}
              <li><a href="/libraries/{{ manager }}/{{ . }}">{{ . }}</a></li>
              {{/used_by}}
              {{#others}}
              <li>and {{ others }} others
              {{/others}}
            </ul>
          </div>
          {{/used_by_count}}
        </div>

    = javascript_include_tag "lumen"
    :javascript
      !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");

      window.logged_in = #{logged_in?.inspect};
      window.votes = #{@votes.inspect};

      window.vote = function(link, library) {
        if (!logged_in) {
          $('#modal-log-in a').attr('href', "/auth/github?vote=" + library)
          $('#modal-log-in').modal('show');
        } else {
          votes.push(library);
          $.get('/vote/' + library);
          $(link).replaceWith('<i class="fa fa-star text-warning"></i>');
        }
      };

      $(document).ready(function() {
        var $q = $('#q');
        var $hits = $('#hits');
        var $type = $('#hits-type');
        var $stats = $('#stats');
        var $facets = $('#facets');
        var $pagination = $('#pagination');
        var $noresults = $('#noresults');
        var $content = $('#content');

        var LABELS = {
          "language": { order: 0, label: 'Platform' },
          "category": { order: 1, label: 'Category <small class="label label-success text-mini">beta</small>' },
        };

        var client = new AlgoliaSearch('#{ENV['ALGOLIA_APPLICATION_ID']}', '#{ENV['ALGOLIA_SEARCH_ONLY_API_KEY']}');
        var index = client.initIndex('#{Library.index_name}');
        var mini = false;
        var refinements = {};
        var manager = null;
        var page = 0;

        var projectTemplate = Hogan.compile($('#project-hit').text());
        var libraryTemplate = Hogan.compile($('#library-hit').text());
        var template = libraryTemplate;

        var lastQuery = null;
        $q.on('keyup change', function() {
          if (lastQuery != $q.val()) {
            lastQuery = $q.val();
            refinements = {};
            page = 0;
            search();
          }
        });

        window.toggleManager = function(link, m) {
          var v = $(link).text();
          $type.text(v);
          manager = m;
          search();
          return false;
        };

        window.toggleRefinenement = function(v) {
          refinements[v] = !refinements[v];
          search();
          return false;
        };

        window.gotoPage = function(p) {
          page = p;
          window.scrollTo(0, 0);
          search();
          return false;
        }

        if ('#{@manager}' !== '') {
          toggleManager($('a[rel="#{@manager}"]')[0], '#{@manager}');
        }

        if (location.hash && location.hash.indexOf('#!/') === 0) {
          var parts = location.hash.substring(3).split('&');
          for (var i = 0; i < parts.length; ++i) {
            var k = parts[i].slice(0, parts[i].indexOf('='));
            var v = decodeURIComponent(parts[i].slice(k.length + 1));
            if (k === 'q') {
              $q.val(v);
            } else if (k === 'manager') {
              toggleManager($('a[rel="' + v + '"]')[0], v);
            } else if (k === 'facetFilter') {
              refinements[v] = true;
            } else if (k === 'page') {
              page = parseInt(v);
            }
          }
          search();
        }

        function searchCallback(success, content) {
          if (!success || content.query != $q.val().trim()) {
            return;
          }

          if (content.hits.length > 0) {
            $stats.html('Results <strong>' + (content.page * content.hitsPerPage + 1) + ' - <span class="">' + (content.page * content.hitsPerPage + content.hits.length) + '</span></strong> of <strong>' + content.nbHits.number_with_delimiter() + '</strong> in <strong>' + content.processingTimeMS + ' ms</strong>');
            $noresults.hide();
          } else {
            $stats.html('');
            $noresults.show();
          }

          var facets = '';
          var ordered_facets = [];
          for (var facet in content.facets) {
            ordered_facets.push(facet);
          }
          ordered_facets = ordered_facets.sort(function(a, b) { return LABELS[a].order > LABELS[b].order; });
          for (var j = 0; j < ordered_facets.length; ++j) {
            var facet = ordered_facets[j];
            facets += '<h3>' + LABELS[facet].label + '</h3><ul class="list-unstyled">';
            var values = [];
            for (var value in content.facets[facet]) {
              values.push({ key: value, count: content.facets[facet][value] });
            }
            values = values.sort(function(a,b) { return b.count - a.count; });
            for (var i = 0; i < values.length; ++i) {
              var v = facet + ':' + values[i].key;
              var clazz = refinements[v] ? 'refined' : '';
              facets += '<li class="' + clazz + '"><a href="#" onclick="return toggleRefinenement(\'' + v + '\')">' + values[i].key + '</a> (' + values[i].count.number_with_delimiter() + ')</li>';
            }
            facets += '</ul>';
          }
          $facets.html(facets);

          var hits = '';
          for (var i = 0; i < content.hits.length; ++i) {
            var hit = content.hits[i];
            if (hit.used_by_count > hit.used_by.length) {
              hit['others'] = (hit.used_by_count - hit.used_by.length).number_with_delimiter();
            }
            hit['voted'] = $.inArray(parseInt(hit.objectID), votes) > -1;
            hits += template.render(hit);
          }
          $hits.html(hits);

          var pagination = '<ul class="list-inline">';
          if (content.page > 0) {
            pagination += '<li><a href="#" onclick="return gotoPage(' + (content.page - 1) + ')">« Previous page</a></li>';
          }
          if (content.page + 1 < content.nbPages) {
            pagination += '<li><a href="#" onclick="return gotoPage(' + (content.page + 1) + ')">Next page »</a></li>';
          }
          pagination += '</ul>';
          $pagination.html(pagination);
        }

        function search() {
          var q = $q.val().trim();

          var facetFilters = [];
          for (var refine in refinements) {
            if (refinements[refine]) {
              facetFilters.push(refine);
            }
          }

          var tagFilters = [];
          if (manager) {
            tagFilters.push(manager);
          }

          if (location.hash.indexOf('#!/') == 0 || q) {
            var params = [];
            params.push('q=' + encodeURIComponent(q));
            if (manager) {
              params.push('manager=' + encodeURIComponent(manager));
            }
            for (var i = 0; i < facetFilters.length; ++i) {
              params.push('facetFilter=' + encodeURIComponent(facetFilters[i]));
            }
            if (page > 0) {
              params.push('page=' + page);
            }
            location.replace('#!/' + params.join('&'));
          }

          if (q === '') {
            $hits.empty();
            $stats.empty();
            $facets.empty();
            $pagination.empty();
            $noresults.hide();
            $content.show();
            return;
          }
          $content.hide();
          if (!mini) {
            mini = true;
            $('#header').addClass('mini');
          }

          $('#no_results_q').text(q);
          var filters = $.merge($.merge([], tagFilters), facetFilters).join(' + ');
          if (!filters) {
            filters = 'no refinements';
          }
          $('#no_results_filters').text(filters);

          index.search(q, searchCallback, {
            page: page,
            hitsPerPage: 10,
            facets: '*',
            maxValuesPerFacet: 20,
            minWordSizefor1Typo: 5,
            minWordSizefor2Typos: 9,
            facetFilters: facetFilters.join(','),
            tagFilters: tagFilters.join(','),
            attributesToRetrieve: ['manager', 'short_name', 'name', 'score', 'homepage_uri', 'repository_uri', 'used_by', 'used_by_count', 'description', 'category'],
            attributesToSnippet: ['description:100']
          });
        }
      });
    = yield(:page_javascript) if content_for?(:page_javascript)
    :javascript
      console.log(
        "Built With:\n" +
        "\n" +
        "                      oooo                                        oooo     oo                \n" +
        "        ooooo         oooo                                       ooooo   ooooo               \n" +
        "       ooooooo        oooo                         oxxxxxxo      ooooo     oo                \n" +
        "      ooooooooo       oooo          ooooo     ooo  oooooooo      ooooo              oooooo   \n" +
        "     oooooooooo       oooo     ooooooooooooo oxxxooxxxxxxxxoo    ooooo    oooo    ooooooooooo\n" +
        "    ooooo  ooooo      oooo    oooooo    oooo  oxxxooo  oooxxxoo  ooooo    oooo           oooo\n" +
        "   ooooo    ooooo     oooo   ooooo      oooo  oxxoo   oxxxxoxxxo ooooo    oooo           oooo\n" +
        "   ooooooooooooooo    oooo   ooooo      oooo  xxxo    oooo  xxxo ooooo    oooo    ooooooooooo\n" +
        "  ooooooooooooooooo   oooo   ooooo      oooo  oxxo         oxxxo ooooo    oooo  oooooo   oooo\n" +
        " ooooo         oooo   oooo    oooooo   ooooo  ooxxoo      ooxxo  ooooo    oooo  ooooo     ooo\n" +
        "ooooo          ooooo  oooooo   ooooooooooooo    oxxxoooooxxxoo    oooooo  oooo   oooooooooooo\n" +
        "oooo            oooo   ooooo           ooooo      oooooooooo       ooooo  oooo     oooooooooo\n" +
        "                               oo      ooooo                                                 \n" +
        "                              ooooooooooooo                                                  \n" +
        "\n" +
        "                      POWERFUL REALTIME SEARCH API BUILT FOR DEVELOPERS\n" +
        "                               http://www.algolia.com/console"
      );
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-32446386-1']);
      _gaq.push(['_setDomainName', '#{request.host}']);
      _gaq.push(['_setAllowLinker', true]);
      _gaq.push(['_trackPageview', '/depstack#{request.path if request.path != '/'}']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
